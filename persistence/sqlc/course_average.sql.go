// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: course_average.sql

package grade_database

import (
	"context"
)

const createCourseAverage = `-- name: CreateCourseAverage :one
INSERT INTO "CourseAverage" (
    course_name, average
) VALUES (
    $1, $2
)
RETURNING id, course_name, average
`

type CreateCourseAverageParams struct {
	CourseName string
	Average    int32
}

func (q *Queries) CreateCourseAverage(ctx context.Context, arg CreateCourseAverageParams) (CourseAverage, error) {
	row := q.db.QueryRowContext(ctx, createCourseAverage, arg.CourseName, arg.Average)
	var i CourseAverage
	err := row.Scan(&i.ID, &i.CourseName, &i.Average)
	return i, err
}

const deleteCourseAverage = `-- name: DeleteCourseAverage :exec
DELETE FROM "CourseAverage"
WHERE id = $1
`

func (q *Queries) DeleteCourseAverage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCourseAverage, id)
	return err
}

const listCourseAverages = `-- name: ListCourseAverages :many
SELECT id, course_name, average FROM "CourseAverage"
ORDER BY id
`

func (q *Queries) ListCourseAverages(ctx context.Context) ([]CourseAverage, error) {
	rows, err := q.db.QueryContext(ctx, listCourseAverages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseAverage
	for rows.Next() {
		var i CourseAverage
		if err := rows.Scan(&i.ID, &i.CourseName, &i.Average); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
