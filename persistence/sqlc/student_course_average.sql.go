// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: student_course_average.sql

package grade_database

import (
	"context"
)

const createStudentCourseAverage = `-- name: CreateStudentCourseAverage :one
INSERT INTO "StudentCourseAverage" (
    course_name, student_name, average
) VALUES (
    $1, $2, $3
)
RETURNING id, course_name, student_name, average
`

type CreateStudentCourseAverageParams struct {
	CourseName  string
	StudentName string
	Average     int32
}

func (q *Queries) CreateStudentCourseAverage(ctx context.Context, arg CreateStudentCourseAverageParams) (StudentCourseAverage, error) {
	row := q.db.QueryRowContext(ctx, createStudentCourseAverage, arg.CourseName, arg.StudentName, arg.Average)
	var i StudentCourseAverage
	err := row.Scan(
		&i.ID,
		&i.CourseName,
		&i.StudentName,
		&i.Average,
	)
	return i, err
}

const deleteStudentCourseAverage = `-- name: DeleteStudentCourseAverage :exec
DELETE FROM "StudentCourseAverage"
WHERE id = $1
`

func (q *Queries) DeleteStudentCourseAverage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudentCourseAverage, id)
	return err
}

const listStudentCourseAverages = `-- name: ListStudentCourseAverages :many
SELECT id, course_name, student_name, average FROM "StudentCourseAverage"
ORDER BY id
`

func (q *Queries) ListStudentCourseAverages(ctx context.Context) ([]StudentCourseAverage, error) {
	rows, err := q.db.QueryContext(ctx, listStudentCourseAverages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentCourseAverage
	for rows.Next() {
		var i StudentCourseAverage
		if err := rows.Scan(
			&i.ID,
			&i.CourseName,
			&i.StudentName,
			&i.Average,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
