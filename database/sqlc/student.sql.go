// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: student.sql

package grade_database

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO "Student" (
    last_name, first_name
) VALUES (
    $1, $2
)
RETURNING id, last_name, first_name
`

type CreateStudentParams struct {
	LastName  string
	FirstName string
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.LastName, arg.FirstName)
	var i Student
	err := row.Scan(&i.ID, &i.LastName, &i.FirstName)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM "Student"
WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, id)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT id, last_name, first_name FROM "Student"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i Student
	err := row.Scan(&i.ID, &i.LastName, &i.FirstName)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, last_name, first_name FROM "Student"
ORDER BY id
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.LastName, &i.FirstName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE "Student"
set first_name = $2,
    last_name = $3
WHERE id = $1
    RETURNING id, last_name, first_name
`

type UpdateStudentParams struct {
	ID        int32
	FirstName string
	LastName  string
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent, arg.ID, arg.FirstName, arg.LastName)
	var i Student
	err := row.Scan(&i.ID, &i.LastName, &i.FirstName)
	return i, err
}
