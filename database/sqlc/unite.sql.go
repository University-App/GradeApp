// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: unite.sql

package grade_database

import (
	"context"
)

const createUnite = `-- name: CreateUnite :one
INSERT INTO "Unite" (
    unite_name
) VALUES (
    $1
)
RETURNING id, unite_name
`

func (q *Queries) CreateUnite(ctx context.Context, uniteName string) (Unite, error) {
	row := q.db.QueryRowContext(ctx, createUnite, uniteName)
	var i Unite
	err := row.Scan(&i.ID, &i.UniteName)
	return i, err
}

const deleteUnite = `-- name: DeleteUnite :exec
DELETE FROM "Unite"
WHERE id = $1
`

func (q *Queries) DeleteUnite(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUnite, id)
	return err
}

const getUnite = `-- name: GetUnite :one
SELECT id, unite_name FROM "Unite"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUnite(ctx context.Context, id int32) (Unite, error) {
	row := q.db.QueryRowContext(ctx, getUnite, id)
	var i Unite
	err := row.Scan(&i.ID, &i.UniteName)
	return i, err
}

const listUnites = `-- name: ListUnites :many
SELECT id, unite_name FROM "Unite"
ORDER BY id
`

func (q *Queries) ListUnites(ctx context.Context) ([]Unite, error) {
	rows, err := q.db.QueryContext(ctx, listUnites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unite
	for rows.Next() {
		var i Unite
		if err := rows.Scan(&i.ID, &i.UniteName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUniteName = `-- name: UpdateUniteName :one
UPDATE "Unite"
set unite_name = $2
WHERE id = $1
    RETURNING id, unite_name
`

type UpdateUniteNameParams struct {
	ID        int32
	UniteName string
}

func (q *Queries) UpdateUniteName(ctx context.Context, arg UpdateUniteNameParams) (Unite, error) {
	row := q.db.QueryRowContext(ctx, updateUniteName, arg.ID, arg.UniteName)
	var i Unite
	err := row.Scan(&i.ID, &i.UniteName)
	return i, err
}
